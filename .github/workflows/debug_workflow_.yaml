name: InternCI_debug

on:
  workflow_dispatch:
env:
  iothubname: "yardvisibilityiothubhiramoto3"
  eventhubsnamespace: "yardvisibilityeventhubhiramoto3"
  resourceGroup: "InternDev"
  location: "eastus"
  endpointsubscriptionid: ${{ secrets.ENDPOINTSUBSCRIPTIONID }}
  dpsname: "yardvisibilitydpshiramoto3"

jobs:
  MakeIoTHubsAndDPS_:
    runs-on: ubuntu-latest
    if: "contains(env.location, 'east')"
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a single command using the runners shell
      - name: a
        run: |
          echo "Hello World"

  MakeIoTHubsAndDPS:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a single command using the runners shell
      - name: a
        run: |
          contains('Hello world', 'llo')
          contains('abcde', 'abc')
          contains('abcde', 'abce')
        
      - name: Login azure
        run: az login # login azure manually
      - name: Add custom endpoint
        run: |
          echo "eventhubname=msg-licenseplate" >> $GITHUB_ENV
          echo "endpointname=EndpointMsgLicensePlate" >> $GITHUB_ENV
      - name: def routelist
        run: |
          echo "routelist<<EOF" >> $GITHUB_ENV
          echo $(az iot hub route list -g $resourceGroup --hub-name $iothubname -o tsv --query "[].name") >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Add IoTHub route
        run: |
          echo $(az iot hub route list -g $resourceGroup --hub-name $iothubname -o tsv --query "[].name")
          echo '$(az iot hub route list -g $resourceGroup --hub-name $iothubname -o tsv --query "[].name")' -like "*Route*"
          echo '${{ env.routelist }}' -like "*Route*"
          #az iot hub route create --en "EndpointMsgLicensePlate" --hub-name $iothubname --name "RouteMsgLicensePlate" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "LicensePlateModule" AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production")'
          #az iot hub route create --en "EndPointMsgTrailerId" --hub-name $iothubname --name "RouteMsgTrailerId" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "TrailerIdModule" AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production")'
          #az iot hub route create --en "EndPointDeviceMetrics" --hub-name $iothubname --name "RouteDeviceMetrics" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "azureiotedgemetricscollector" AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production")'
          #az iot hub route create --en "EndpointEdgeConnection" --hub-name $iothubname --name "RouteConnectionStateEvent" --source "DeviceConnectionStateEvents" --enabled true --resource-group $resourceGroup -c '($connectionModuleId = "MonitoringModule" OR $connectionModuleId = "TrailerIdModule") AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production") AND opType="deviceConnected"'
          az config set extension.use_dynamic_install=yes_without_prompt
      - name: Make DPS
        run: |
          echo "a"
          # az iot dps create --name $dpsname --resource-group $resourceGroup --location $location
      - name: Make link between IoTHub and DPS
        run: az iot dps linked-hub create --dps-name $dpsname --resource-group $resourceGroup --connection-string $(az iot hub connection-string show --hub-name $iothubname --key-type primary -o tsv) --location $location
