name: InternCI_debug

on:
  workflow_dispatch:
env:
  iothubname: "yardvisibilityiothubhiramoto3"
  eventhubsnamespace: "yardvisibilityeventhubhiramoto3"
  resourceGroup: "InternDev"
  location: "eastus"
  endpointsubscriptionid: ${{ secrets.ENDPOINTSUBSCRIPTIONID }}
  dpsname: "yardvisibilitydpshiramoto3"
  iothubnamelist: '"MsgLicensePlate" "MsgTrailerId" "DeviceMetrics" "ConnectionStateEvent"'
  connectionModuleIdlist: '"LicensePlateModule" "TrailerIdModule" "azureiotedgemetricscollector" "MonitoringModule" "TrailerIdModule"'
  certname: "YardTrackingUShiramoto2.production"

jobs:
  MakeIoTHubsAndDPS:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a single command using the runners shell
      - name: aaa
        run: |
          echo "*Route${iothubnamelist[0]}*"
          for i in $iothubnamelist; do echo sdsda$i; done
      - name: Login azure
        run: az login # login azure manually
      - name: Add custom endpoint
        run: |
          echo "eventhubname=msg-licenseplate" >> $GITHUB_ENV
          echo "endpointname=EndpointMsgLicensePlate" >> $GITHUB_ENV
      - name: def routelist
        run: |
          echo "routelist<<EOF" >> $GITHUB_ENV
          echo $(az iot hub route list -g $resourceGroup --hub-name $iothubname -o tsv --query "[].name") >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Add IoTHub route
        run: |
          if [[ "$routelist" != *Route${iothubnamelist[0]}* ]]; then
          az iot hub route create --en "Endpoint${iothubnamelist[0]}" --hub-name $iothubname --name "Route${iothubnamelist[0]}" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "${connectionModuleIdlist[0]}" AND STARTS_WITH($connectionDeviceId,"$certname")'
          else echo "Route: Route${iothubnamelist[0]} is already exit, Skip."
          fi
          if [[ "$routelist" != *Route${iothubnamelist[1]}* ]]; then
          az iot hub route create --en "Endpoint${iothubnamelist[1]}" --hub-name $iothubname --name "Route${iothubnamelist[1]}" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "${connectionModuleIdlist[1]}" AND STARTS_WITH($connectionDeviceId,"$certname")'
          else echo "Route: Route${iothubnamelist[1]} is already exit, Skip."
          fi 
          if [[ "$routelist" != *Route${iothubnamelist[2]}* ]]; then
          az iot hub route create --en "Endpoint${iothubnamelist[2]}" --hub-name $iothubname --name "Route${iothubnamelist[2]}" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "${connectionModuleIdlist[2]}" AND STARTS_WITH($connectionDeviceId,"$certname")'
          else echo "Route: Route${iothubnamelist[2]} is already exit, Skip."
          fi 
          if [[ "$routelist" != *Route${iothubnamelist[3]}* ]]; then
          az iot hub route create --en "Endpoint${iothubnamelist[3]}" --hub-name $iothubname --name "Route${iothubnamelist[3]}" --source "DeviceConnectionStateEvents" --enabled true --resource-group $resourceGroup -c '($connectionModuleId = "${connectionModuleIdlist[3]}" OR $connectionModuleId = "${connectionModuleIdlist[4]}") AND STARTS_WITH($connectionDeviceId,"$certname") AND opType="deviceConnected"'
          else echo "Route: Route${iothubnamelist[3]} is already exit, Skip."
          fi
          az config set extension.use_dynamic_install=yes_without_prompt
          #routeExitFlag=0
          #for i in $routelist; do if [ $i == "RouteMsgLicensePlate" ]; then routeExitFlag=1;  fi; done
          #if [ $routeExitFlag == 0 ]; then 
          #az iot hub route create --en "EndpointMsgLicensePlate" --hub-name $iothubname --name "RouteMsgLicensePlate" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "LicensePlateModule" AND STARTS_WITH($connectionDeviceId,"$certname")'
          #else echo "Route: RouteMsgLicensePlate is already exit, Skip."
          #fi
          #echo $(az iot hub route list -g $resourceGroup --hub-name $iothubname -o tsv --query "[].name")
          #echo '$(az iot hub route list -g $resourceGroup --hub-name $iothubname -o tsv --query "[].name")' -like "*Route*"
          #az iot hub route create --en "EndpointMsgLicensePlate" --hub-name $iothubname --name "RouteMsgLicensePlate" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "LicensePlateModule" AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production")'
          #az iot hub route create --en "EndPointMsgTrailerId" --hub-name $iothubname --name "RouteMsgTrailerId" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "TrailerIdModule" AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production")'
          #az iot hub route create --en "EndPointDeviceMetrics" --hub-name $iothubname --name "RouteDeviceMetrics" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "azureiotedgemetricscollector" AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production")'
          #az iot hub route create --en "EndpointEdgeConnection" --hub-name $iothubname --name "RouteConnectionStateEvent" --source "DeviceConnectionStateEvents" --enabled true --resource-group $resourceGroup -c '($connectionModuleId = "MonitoringModule" OR $connectionModuleId = "TrailerIdModule") AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production") AND opType="deviceConnected"'
      - name: Make DPS
        run: |
          echo "a"
          # az iot dps create --name $dpsname --resource-group $resourceGroup --location $location
      - name: Make link between IoTHub and DPS
        run: az iot dps linked-hub create --dps-name $dpsname --resource-group $resourceGroup --connection-string $(az iot hub connection-string show --hub-name $iothubname --key-type primary -o tsv) --location $location
