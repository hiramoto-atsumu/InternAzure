name: InternCI

on:
  workflow_dispatch:
env:
  iothubname: "yardvisibilityiothubhiramoto3"
  eventhubsnamespace: "yardvisibilityeventhubhiramoto3"
  resourceGroup: "InternDev"
  location: "eastus"
  endpointsubscriptionid: ${{ secrets.ENDPOINTSUBSCRIPTIONID }}
jobs:
  MakeIoTHubsAndDPS:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Login azure
        run: az login # login azure manually
      - name: Create IoT Hubs
        run: az iot hub create --name $iothubname --resource-group $resourceGroup --location $location --sku S1 --mintls 1.2
      - name: Make namespace of EventHubs
        run: az eventhubs namespace create --resource-group $resourceGroup --name $eventhubsnamespace --location $location --sku Basic
      - name: Make EventHubs' entitiy
        run: |
          az eventhubs eventhub create --name msg-licenseplate --namespace-name $eventhubsnamespace -g $resourceGroup --message-retention 1 --partition-count 2
          az eventhubs eventhub create --name msg-location --namespace-name $eventhubsnamespace -g $resourceGroup --message-retention 1 --partition-count 2
          az eventhubs eventhub create --name event-trailer-connection --namespace-name $eventhubsnamespace -g $resourceGroup --message-retention 1 --partition-count 2
          az eventhubs eventhub create --name msg-trailer-id --namespace-name $eventhubsnamespace -g $resourceGroup --message-retention 1 --partition-count 2
          az eventhubs eventhub create --name device-metrics --namespace-name $eventhubsnamespace -g $resourceGroup --message-retention 1 --partition-count 2
          az eventhubs eventhub create --name edge-connection --namespace-name $eventhubsnamespace -g $resourceGroup --message-retention 1 --partition-count 2
          az eventhubs eventhub create --name msg-feedback --namespace-name $eventhubsnamespace -g $resourceGroup --message-retention 1 --partition-count 2
      - name: Add shared access policy
        run: |
          az eventhubs eventhub authorization-rule create --resource-group $resourceGroup --namespace-name $eventhubsnamespace --eventhub-name device-metrics --name TestFunctionPolicy --rights Listen Send
          az eventhubs eventhub authorization-rule create --resource-group $resourceGroup --namespace-name $eventhubsnamespace --eventhub-name edge-connection --name TestFunctionPolicy --rights Listen Send
          az eventhubs eventhub authorization-rule create --resource-group $resourceGroup --namespace-name $eventhubsnamespace --eventhub-name event-trailer-connection --name TestFunctionPolicy --rights Listen Send
          az eventhubs eventhub authorization-rule create --resource-group $resourceGroup --namespace-name $eventhubsnamespace --eventhub-name msg-licenseplate --name TestFunctionPolicy --rights Listen Send
          az eventhubs eventhub authorization-rule create --resource-group $resourceGroup --namespace-name $eventhubsnamespace --eventhub-name msg-location --name TestFunctionPolicy --rights Listen Send
          az eventhubs eventhub authorization-rule create --resource-group $resourceGroup --namespace-name $eventhubsnamespace --eventhub-name msg-trailer-id --name TestFunctionPolicy --rights Listen Send
          az eventhubs eventhub authorization-rule create --resource-group $resourceGroup --namespace-name $eventhubsnamespace --eventhub-name msg-feedback --name TestFunctionPolicy --rights Listen Send
      - name: Add custom endpoint
        run: |
          echo "eventhubname=msg-licenseplate" >> $GITHUB_ENV
          echo "endpointname = EndpointMsgLicensePlate" >> $GITHUB_ENV
      - name: get connectionstring
        run: |
          echo "connectionstring<<EOF" >> $GITHUB_ENV
          echo $(az eventhubs eventhub authorization-rule keys list --resource-group $resourceGroup --namespace-name $eventhubsnamespace --name TestFunctionPolicy --eventhub-name $eventhubname) >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          # echo "connectionstring = $(az eventhubs eventhub authorization-rule keys list --resource-group $resourceGroup --namespace-name $eventhubsnamespace --name TestFunctionPolicy --eventhub-name $eventhubname)" >> $GITHUB_ENV
      - name: get connectionstring
        run: |
          echo "connectionstring = $([string]$connectionstring -replace '\r?\n' | ConvertFrom-Json)" >> $GITHUB_ENV
      - name: add roting endpoint
        run: az iot hub routing-endpoint create --endpoint-name $ENDPOINTNAME --endpoint-resource-group $resourceGroup --endpoint-subscription-id $endpointsubscriptionid --endpoint-type eventhub --hub-name $iothubname --auth-type keyBased --connection-string $connectionstring.primaryConnectionString

          

          

