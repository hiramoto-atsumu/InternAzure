name: InternCI

on:
  workflow_dispatch:
env:
  iothubname: "yardvisibilityiothubhiramoto3"
  eventhubsnamespace: "yardvisibilityeventhubhiramoto3"
  resourceGroup: "InternDev"
  location: "eastus"
  endpointsubscriptionid: ${{ secrets.ENDPOINTSUBSCRIPTIONID }}
  dpsname: "yardvisibilitydpshiramoto3"
  eventhubnamelist: "msg-licenseplate msg-location event-trailer-connection msg-trailer-id device-metrics edge-connection msg-feedback"
  iothubnamelist: (MsgLicensePlate MsgTrailerId DeviceMetrics EdgeConnection ConnectionStateEvent)
  connectionModuleIdlist: (LicensePlateModule TrailerIdModule azureiotedgemetricscollector MonitoringModule TrailerIdModule)
  certname: "YardTrackingUShiramoto2.production"

jobs:
  MakeIoTHubsAndDPS:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Login Azure
        run: az login # login azure manually
      - name: Install required extention function
        run: az config set extension.use_dynamic_install=yes_without_prompt
      - name: Check already existing environment
        run: |
          echo "routelist<<EOF" >> $GITHUB_ENV
          echo $(az iot hub route list -g $resourceGroup --hub-name $iothubname -o tsv --query "[].name") >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          routelist=$(az iot hub route list -g $resourceGroup --hub-name $iothubname -o tsv --query "[].name")
          echo "dpslist<<EOF" >> $GITHUB_ENV
          echo $(az iot dps list --resource-group $resourceGroup -o tsv --query "[].name") >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "dpslinkedhublist<<EOF" >> $GITHUB_ENV
          echo $(az iot dps linked-hub list  --dps-name $dpsname -o tsv --query "[].name") >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create IoTHubs
        run: az iot hub create --name $iothubname --resource-group $resourceGroup --location $location --sku S1 --mintls 1.2
      - name: Make namespace of EventHubs
        run: az eventhubs namespace create --resource-group $resourceGroup --name $eventhubsnamespace --location $location --sku Basic
      - name: Make EventHubs' entitiy
        run: |
          for eventhubname in $eventhubnamelist; do
          az eventhubs eventhub create --name $eventhubname --namespace-name $eventhubsnamespace -g $resourceGroup --message-retention 1 --partition-count 2
          done
      - name: Add shared access policy
        run: |
          for eventhubname in $eventhubnamelist; do
          az eventhubs eventhub authorization-rule create --resource-group $resourceGroup --namespace-name $eventhubsnamespace --eventhub-name $eventhubname --name TestFunctionPolicy --rights Listen Send
          done
      - name: Add custom endpoint variables [msg-licenseplate]
        run: |
          eventhubname="msg-licenseplate"
          endpointname="EndpointMsgLicensePlate"
          az iot hub routing-endpoint create --endpoint-name $endpointname --endpoint-resource-group $resourceGroup --endpoint-subscription-id $endpointsubscriptionid --endpoint-type eventhub --hub-name $iothubname --auth-type keyBased --connection-string $(az eventhubs eventhub authorization-rule keys list --resource-group $resourceGroup --namespace-name $eventhubsnamespace --name TestFunctionPolicy --eventhub-name $eventhubname -o tsv --query "primaryConnectionString")
      - name: Add custom endpoint variables [msg-trailer-id]
        run: |
          eventhubname="msg-trailer-id"
          endpointname="EndPointMsgTrailerId"
          az iot hub routing-endpoint create --endpoint-name $endpointname --endpoint-resource-group $resourceGroup --endpoint-subscription-id $endpointsubscriptionid --endpoint-type eventhub --hub-name $iothubname --auth-type keyBased --connection-string $(az eventhubs eventhub authorization-rule keys list --resource-group $resourceGroup --namespace-name $eventhubsnamespace --name TestFunctionPolicy --eventhub-name $eventhubname -o tsv --query "primaryConnectionString")
      - name: Add custom endpoint variables [device-metrics]
        run: |
          eventhubname="device-metrics"
          endpointname="EndPointDeviceMetrics"
          az iot hub routing-endpoint create --endpoint-name $endpointname --endpoint-resource-group $resourceGroup --endpoint-subscription-id $endpointsubscriptionid --endpoint-type eventhub --hub-name $iothubname --auth-type keyBased --connection-string $(az eventhubs eventhub authorization-rule keys list --resource-group $resourceGroup --namespace-name $eventhubsnamespace --name TestFunctionPolicy --eventhub-name $eventhubname -o tsv --query "primaryConnectionString")
      - name: Add custom endpoint variables [edge-connection]
        run: |
          eventhubname="edge-connection"
          endpointname="EndpointEdgeConnection"
          az iot hub routing-endpoint create --endpoint-name $endpointname --endpoint-resource-group $resourceGroup --endpoint-subscription-id $endpointsubscriptionid --endpoint-type eventhub --hub-name $iothubname --auth-type keyBased --connection-string $(az eventhubs eventhub authorization-rule keys list --resource-group $resourceGroup --namespace-name $eventhubsnamespace --name TestFunctionPolicy --eventhub-name $eventhubname -o tsv --query "primaryConnectionString")
      - name: Add IoTHub route
        run: |
          echo $routelist
          echo $dpslist
          # List transformation must be coded in this run flow. the transformation doesn't work if you code before this flow.
          iothubnamelist=${{ env.iothubnamelist }}
          connectionModuleIdlist=${{ env.connectionModuleIdlist }}
          if [[ "$routelist" != *Route${iothubnamelist[0]}* ]]; then
          az iot hub route create --en "Endpoint${iothubnamelist[0]}" --hub-name $iothubname --name "Route${iothubnamelist[0]}" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "${connectionModuleIdlist[0]}" AND STARTS_WITH($connectionDeviceId,"$certname")'
          else echo "Route: Route${iothubnamelist[0]} is already exit, Skip."
          fi
          if [[ "$routelist" != *Route${iothubnamelist[1]}* ]]; then
          az iot hub route create --en "Endpoint${iothubnamelist[1]}" --hub-name $iothubname --name "Route${iothubnamelist[1]}" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "${connectionModuleIdlist[1]}" AND STARTS_WITH($connectionDeviceId,"$certname")'
          else echo "Route: Route${iothubnamelist[1]} is already exit, Skip."
          fi 
          if [[ "$routelist" != *Route${iothubnamelist[2]}* ]]; then
          az iot hub route create --en "Endpoint${iothubnamelist[2]}" --hub-name $iothubname --name "Route${iothubnamelist[2]}" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "${connectionModuleIdlist[2]}" AND STARTS_WITH($connectionDeviceId,"$certname")'
          else echo "Route: Route${iothubnamelist[2]} is already exit, Skip."
          fi 
          if [[ "$routelist" != *Route${iothubnamelist[3]}* ]]; then
          az iot hub route create --en "Endpoint${iothubnamelist[3]}" --hub-name $iothubname --name "Route${iothubnamelist[4]}" --source "DeviceConnectionStateEvents" --enabled true --resource-group $resourceGroup -c '($connectionModuleId = "${connectionModuleIdlist[3]}" OR $connectionModuleId = "${connectionModuleIdlist[4]}") AND STARTS_WITH($connectionDeviceId,"$certname") AND opType="deviceConnected"'
          else echo "Route: Route${iothubnamelist[3]} is already exit, Skip."
          fi
          az config set extension.use_dynamic_install=yes_without_prompt
          # $(az iot hub route list -g $resourceGroup --hub-name $iothubname -o tsv --query "[].name")
          # az iot hub route create --en "EndpointMsgLicensePlate" --hub-name $iothubname --name "RouteMsgLicensePlate" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "LicensePlateModule" AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production")'
          # az iot hub route create --en "EndPointMsgTrailerId" --hub-name $iothubname --name "RouteMsgTrailerId" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "TrailerIdModule" AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production")'
          # az iot hub route create --en "EndPointDeviceMetrics" --hub-name $iothubname --name "RouteDeviceMetrics" --source "DeviceMessages" --enabled true --resource-group $resourceGroup -c '$connectionModuleId = "azureiotedgemetricscollector" AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production")'
          # az iot hub route create --en "EndpointEdgeConnection" --hub-name $iothubname --name "RouteConnectionStateEvent" --source "DeviceConnectionStateEvents" --enabled true --resource-group $resourceGroup -c '($connectionModuleId = "MonitoringModule" OR $connectionModuleId = "TrailerIdModule") AND STARTS_WITH($connectionDeviceId,"YardTrackingUShiramoto2.production") AND opType="deviceConnected"'
          # az config set extension.use_dynamic_install=yes_without_prompt
      - name: Make DPS
        run: |
          if [[ "$dpslist" != *$dpsname* ]]; then
          az iot dps create --name $dpsname --resource-group $resourceGroup --location $location
          else echo "DPS: $dpsname is already exit, Skip."
          fi
      - name: Make link between IoTHub and DPS
        run: |
          if [[ "$dpslinkedhublist" != *$iothubname* ]]; then
          az iot dps linked-hub create --dps-name $dpsname --resource-group $resourceGroup --connection-string $(az iot hub connection-string show --hub-name $iothubname --key-type primary -o tsv) --location $location
          else echo "DPS linked hub: Link between $dpsname and $iothubname is already exit, Skip."
          fi
